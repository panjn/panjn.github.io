{"pages":[],"posts":[{"title":"58同城的技术架构","text":"单机系统Windows全家桶 Windows + IIS + SQL Server + C-Sharp —— 面向问题编程","link":"/pages/58-arch/"},{"title":"大数据技术综述","text":"本文为对2014年的大数据技术综述论文《Big Data: A Survey》的翻译，论文作者为 Min Chen、Shiwen Mao和Yunhao Liu","link":"/pages/big-data-survey/"},{"title":"字节跳动基于 Serverless 的前端研发模式升级","text":"大家好，我叫王磊，来自于字节跳动 Web Infra，今天由我给大家分享《字节跳动基于 Serverless 的前端研发模式升级》。","link":"/pages/bytedance-serverless-frontend/"},{"title":"斗鱼的技术架构","text":"业务后台架构早期架构 (2014) 单体应用 Nginx+PHP+Memcached+MySQL 问题：粉丝收到大主播开播信息后，涌入直播间，获取直播间信息等。Memcache采用一致性哈希，同一个直播间的缓存key落在了同一个Memcachd节点，会造成改节点负载过高。 另外，如果Memcached此时没有该直播间信息的缓存，此时大量的并发请求会到达MySQL(缓存击穿)","link":"/pages/douyu-arch/"},{"title":"YARN 在字节跳动的优化与实践","text":"导读: 本文从利用率提升、多负载场景优化、稳定性提升、异地多活四个方面介绍了字节跳动在四年来对 Hadoop YARN 进行的一系列的优化，以及生产环境中的实践经验。","link":"/pages/bytedance-yarn/"},{"title":"百度的在离线混部技术","text":"【百度云原生导读】服务器资源利用率较低，TCO(IT 基础设施的总拥有成本)逐年上涨，对于拥有大量机器资源的公司来说无疑是一个头疼的问题。 混部技术就是在这种情况下应运而生，目前，混部技术在业界还属于比较小众的领域，只有一些资源量级较大的公司在研究、发展混部技术，以期获得收益。 对于百度而言，通过应用混部技术，主混部集群数十万台，提升CPU利用率到40+%，累计节约了数十亿人民币。目前百度容器引擎产品 CCE 已支持在离线混部，并完成了大规模业务落地，本文将带大家深入了解百度的在离线混部技术。","link":"/pages/hybrid-deploy-baidu/"},{"title":"字节跳动的在离线混部技术","text":"5 月 30 日，字节跳动技术沙龙 | 基础架构专场 进行了在线直播。我们邀请到了字节跳动基础架构团队资深研发工程师邵伟、江帆和大家进行分享交流。 本次沙龙给大家分享的主题是《大规模混合部署项目在字节跳动的落地实践》，希望这次的分享能够带给大家一些我们对混部的思考。 沙龙分享的内容将会围绕以下问题来进行： 首先是字节跳动为什么想要开启混部，它产生的背景是什么样的，字节内部的业务形态有什么样的特征使我们能够开启大规模的混部？ 我们具体做了哪些事情来支持混部的顺利开启和落地，在其中遇到哪些问题和挑战？ 以及，在字节内部，混部有哪些典型的应用场景，分别是为了解决什么问题，带来了哪些收益等等。","link":"/pages/hybrid-deploy-bytedance/"},{"title":"腾讯Caelus—全场景在离线混部","text":"引言: 集群管理的一个重要目标是提高资源利用率，随着集群规模的扩大，基础设施成本上涨，资源利用率问题逐步突显，为降低成本，混部技术应运而生。本篇文章结合腾讯技术团队在混部方面的落地和实战经验，来介绍各类场景下在线离线混部的相关概念、面临的问题及混部技术方案，抛砖引玉，供大家交流。","link":"/pages/hybrid-deploy-tx/"},{"title":"腾讯：如何提升Kubernetes集群资源利用率","text":"王孝威，腾讯云容器产品经理，热衷于为客户提供高效的 Kubernetes 使用方式，为客户极致降本增效服务。 晏子怡，腾讯云容器产品经理，在Kubernetes 弹性伸缩、资源高效利用领域有丰富的实战经验。 背景公有云的发展为业务的稳定性、可拓展性、便利性带来了极大帮助。这种用租代替买、并且提供完善的技术支持和保障的服务，理应为业务带来降本增效的效果。但实际上业务上云并不意味着成本一定减少，还需适配云上业务的应用开发、架构设计、管理运维、合理使用等多方面解决方案，才能真正助力业务的降本增效。在《Kubernetes 降本增效标准指南》系列的上一篇文章《容器化计算资源利用率现象剖析》中可看到，IDC 上云后资源利用率提高有限，即使已经容器化，节点的平均利用率依旧仅在 13% 左右，资源利用率的提升任重道远。 本篇文章将带你了解：为什么 Kubernetes 集群中的 CPU 和内存资源利用率 通常都如此之低？现阶段在 TKE 上面有哪些产品化的方法可以轻松提升资源利用率？","link":"/pages/k8s-resource-utils-tx/"},{"title":"一文了解Knative流量机制","text":"自动扩缩容是 Serverless 的核心特征，更好、更快的冷启动是所有 Serverless 平台的极致追求，本文基于网易杭州研究院云计算团队的探索，针对热门 Serverless 平台 Knative，解析其与自动扩容密切相关的流量实现机制，希望能够帮助从业者更好地理解 Knative autoscale 功能。","link":"/pages/knative-traffic/"},{"title":"不知道做啥？看下那些真实业务场景下的技术问题","text":"","link":"/pages/problems/"},{"title":"Pinterest的技术架构","text":"本文来自QCon","link":"/pages/pinterest-arch/"},{"title":"(云计算) 如何解决Serverless函数冷启动的问题？","text":"背景 如果你的PaaS能够有效地在20毫秒内启动实例并运行半秒,那么就可以称之为Serverless。 —— AWS云架构战略副总裁Adrian Cockcroft1 Serverless的最大卖点之一就是在做弹性伸缩时可以将实例数缩到0，没流量时不花钱，有流量来时再扩容。然而理想很丰满，现实很骨感。 无论是在流量刚到达时实例数从0到1，还是为了处理更多的流量将实例数从m扩到n的过程，不得不面对的一个问题就是：冷启动。冷启动时间太长， 就会出现请求超时。","link":"/pages/serverless-coldstart/"},{"title":"Serverless 距离大规模应用还有多远？从冷启动说起","text":"Techo TVP开发者峰会 ServerlessDays China 2021 的压轴环节是圆桌对话，首次齐聚 AWS、阿里云、字节跳动等全球 TOP 云厂商和互联网企业，深入探讨 Serverless 当前现状、发展趋势，并针对具体挑战和应对举措进行深度交流。本文是对本次圆桌论坛《聚焦当下，重构未来：Serverless 全球视野碰撞》的分享整理，希望带大家从更加全面的视角了解 Serverless 的价值、使用场景和收益，共同促进 Serverless 在中国的探索和落地。","link":"/pages/serverless-talk/"},{"title":"一文了解如何在Ubuntu上安装单节点k8s","text":"如果不是root用户，那下面大多数命令都得加sudo 安装Docker1curl -fsSL https://get.docker.com | sudo sh 修改 docker 的 cgroup driver 选项为 systemd，与 k8s 保持一致，并修改 registry-mirror 加速下载","link":"/pages/single-node-k8s-ubuntu/"},{"title":"TKE基于弹性网卡直连Pod的网络负载均衡","text":"作者周宏宇，后台开发，目前负责腾讯云TKE的接入层网络组件（Ingress、Service）。在团队中负责接入层组件的技术方案、开发测试以及相关的服务技术支持。","link":"/pages/tke-eni/"},{"title":"(智能运维) 如何对监控指标做异常检测？","text":"背景参考链接 腾讯 织云Metis时间序列异常检测全方位解析 美团 外卖订单量预测异常报警模型实践 滴滴 滴滴出行海量数据场景下的智能监控与故障定位实践","link":"/pages/ts-anomaly-detection/"},{"title":"Twitter的技术架构","text":"背景2013年时推文的TPS2013年8月3日星期六，人们观看了《天空之城》的播出，Twiiter当时推文的TPS峰值达到了：每秒 143,199 条推文","link":"/pages/twitter-arch/"},{"title":"微博的技术架构","text":"背景 每条微博，在技术上也被称为status或feed. 微博中的关注页是一个feed流，聚合了自己关注了的人的微博。","link":"/pages/weibo-arch/"},{"title":"微信的技术架构","text":"","link":"/pages/weixin-arch/"},{"title":"一文了解CDN加速原理","text":"CDN（Content Delivery Network，内容分发网络）是构建在现有互联网基础之上的一层智能虚拟网络，通过在网络各处部署节点服务器，实现将源站内容分发至所有CDN节点，使用户可以就近获得所需的内容。CDN服务缩短了用户查看内容的访问延迟，提高了用户访问网站的响应速度与网站的可用性，解决了网络带宽小、用户访问量大、网点分布不均等问题。","link":"/pages/wiki-cdn/"},{"title":"一文了解k8s扁平化网络Flannel","text":"Flannel是kubernetes的CNI网络插件之一，实质上是一种主机 overlay网络 。flannel支持多种网络转发模式，常用的是vxlan、hostgw等，我们这里以常用的 udp VXLAN协议讲解。","link":"/pages/wiki-flannel/"},{"title":"一文了解 Kubernetes 整体架构","text":"Kubernetes 的架构设计以及组件之间的通信协议","link":"/pages/wiki-k8s-arch/"},{"title":"高可用的k8s集群部署方案","text":"涉及到的内容 LVS HAProxy Harbor etcd Kubernetes (Master Worker)","link":"/pages/wiki-k8s-high-availability/"},{"title":"一文了解文件系统的发展：从单机到分布式","text":"本文为英文","link":"/pages/wiki-dev-of-file-system/"},{"title":"一文了解k8s三层网络方案host-gw","text":"本文来自极客时间的《深入剖析Kubernetes》系列，很不错， 值得一看。 你好，我是张磊。今天我和你分享的主题是：解读Kubernetes三层网络方案。 在上一篇文章中，我以网桥类型的Flannel插件为例，为你讲解了Kubernetes里容器网络和CNI插件的主要工作原理。不过，除了这种模式之外，还有一种纯三层（Pure Layer 3）网络方案非常值得你注意。其中的典型例子，莫过于Flannel的host-gw模式和Calico项目了。 我们先来看一下Flannel的host-gw模式。","link":"/pages/wiki-k8s-hostgw/"},{"title":"一文了解k8s Ingress","text":"Kubernetes Ingress 只是 Kubernetes 中的一个普通资源对象，需要一个对应的 Ingress 控制器来解析 Ingress 的规则，暴露服务到外部，比如 ingress-nginx，本质上来说它只是一个 Nginx Pod，然后将请求重定向到其他内部（ClusterIP）服务去，这个 Pod 本身也是通过 Kubernetes 服务暴露出去，最常见的方式是通过 LoadBalancer 来实现的。同样本文我们希望用一个简单清晰的概述，让你来了解 Kubernetes Ingress 背后的东西，让你更容易理解使用的 Ingress。 我们可以使用 Ingress 来使内部服务暴露到集群外部去，它为你节省了宝贵的静态 IP，因为你不需要声明多个 LoadBalancer 服务了，此次，它还可以进行更多的额外配置。下面我们通过一个简单的示例来对 Ingress 进行一些说明吧。","link":"/pages/wiki-k8s-ingress/"},{"title":"一文了解k8s服务发现之KubeDNS","text":"前面我们给大家讲解了Service的用法，我们可以通过 Service 生成的ClusterIP(VIP)来访问 Pod 提供的服务，但是在使用的时候还有一个问题：我们怎么知道某个应用的 VIP 呢？比如我们有两个应用，一个是 api 应用，一个是 db 应用，两个应用都是通过Deployment进行管理的，并且都通过 Service 暴露出了端口提供服务。api 需要连接到 db 这个应用，我们只知道 db 应用的名称和 db 对应的 Service 的名称，但是并不知道它的 VIP 地址，我们前面的 Service 课程中是不是学习到我们通过ClusterIP就可以访问到后面的Pod服务，如果我们知道了 VIP 的地址是不是就行了？","link":"/pages/wiki-k8s-kubedns/"},{"title":"一文了解k8s service的不同类型：ClusterIP、NodePort和LoadBalancer等","text":"在 Kubernetes 中 Service 主要有4种不同的类型，其中的 ClusterIP 是最基础的，如下图所示：","link":"/pages/wiki-k8s-service-type/"},{"title":"一文了解k8s service","text":"为什么需要 service在 kubernetes 中，当创建带有多个副本的 deployment 时，kubernetes 会创建出多个 pod，此时即一个服务后端有多个容器，那么在 kubernetes 中负载均衡怎么做，容器漂移后 ip 也会发生变化，如何做服务发现以及会话保持？这就是 service 的作用，service 是一组具有相同 label pod 集合的抽象，集群内外的各个服务可以通过 service 进行互相通信，当创建一个 service 对象时也会对应创建一个 endpoint 对象，endpoint 是用来做容器发现的，service 只是将多个 pod 进行关联，实际的路由转发都是由 kubernetes 中的 kube-proxy 组件来实现，因此，service 必须 kube-proxy 使用，kube-proxy 组件可以运行在 kubernetes 集群中的每一个节点上也可以只运行在单独的几个节点上，其会根据 service 和 endpoints 的变动来改变节点上 iptables 或者 ipvs 中保存的路由规则。","link":"/pages/wiki-k8s-service/"},{"title":"一文了解 Linux 虚拟网络设备Bridge","text":"Linux Bridge（网桥）是用纯软件实现的虚拟交换机，有着和物理交换机相同的功能，例如二层交换，MAC地址学习等。因此我们可以把tun/tap，veth pair等设备绑定到网桥上，就像是把设备连接到物理交换机上一样。此外它和veth pair、tun/tap一样，也是一种虚拟网络设备，具有虚拟设备的所有特性，例如配置IP，MAC地址等","link":"/pages/wiki-linux-network-bridge/"},{"title":"一文了解 Linux network namespace","text":"大家好，我是飞哥！ 在 Linux 上通过 veth 我们可以创建出许多的虚拟设备。通过 Bridge 模拟以太网交换机的方式可以让这些网络设备之间进行通信。不过虚拟化中还有很重要的一步，那就是隔离。借用 Docker 的概念来说，那就是不能让 A 容器用到 B 容器的设备，甚至连看一眼都不可以。只有这样才能保证不同的容器之间复用硬件资源的同时，还不会影响其它容器的正常运行。 在 Linux 上实现隔离的技术手段就是 namespace。通过 namespace 可以隔离容器的进程 PID、文件系统挂载点、主机名等多种资源。不过我们今天重点要介绍的是网络 namespace，简称 netns。它可以为不同的命名空间从逻辑上提供独立的网络协议栈，具体包括网络设备、路由表、arp表、iptables、以及套接字（socket）等。使得不同的网络空间就都好像运行在独立的网络中一样。","link":"/pages/wiki-linux-network-namespace/"},{"title":"一文了解 Linux 网络包接收过程","text":"因为要对百万、千万、甚至是过亿的用户提供各种网络服务，所以在一线互联网企业里面试和晋升后端开发同学的其中一个重点要求就是要能支撑高并发，要理解性能开销，会进行性能优化。而很多时候，如果你对Linux底层的理解不深的话，遇到很多线上性能瓶颈你会觉得狗拿刺猬，无从下手。 我们今天用图解的方式，来深度理解一下在Linux下网络包的接收过程。还是按照惯例来借用一段最简单的代码开始思考。为了简单起见，我们用udp来举例，如下：","link":"/pages/wiki-linux-network-recv/"},{"title":"一文了解 Linux 虚拟网络设备veth","text":"大家好，我是飞哥！ 正如我在朋友圈里所说的，最近我又对网络虚拟化技术产生了浓厚的兴趣。迫切想搞明白在 Docker 等虚拟技术下，网络底层是如何运行的。 不得不说，网络虚拟化技术是我给自己抛的又一个大坑。虽然我自认为把原生 Linux 网络实现过程理解的还算不错了。但在看网络虚拟化相关的技术的时候，还是觉得不是很容易。 不过，飞哥有绝招，那就是先挑个软柿子来捏。这不，今天我给大家带来的就是 Docker 网络虚拟化中的一个比较好理解的技术 - veth。 回想下在物理机组成的网络里，最基础，最简单的网络连接方式是什么？没错，那就是直接用一根交叉网线把两台电脑的网卡连起来。这样，一台机器发送数据，另外一台就能收到了。","link":"/pages/wiki-linux-network-veth/"},{"title":"一文了解 Linux 网络包发送过程","text":"大家好，我是飞哥! 半年前我以源码的方式描述了网络包的接收过程。之后不断有粉丝提醒我还没聊发送过程呢。好，安排！ 在开始今天的文章之前，我先来请大家思考几个小问题。 问1：我们在查看内核发送数据消耗的 CPU 时，是应该看 sy 还是 si ？ 问2：为什么你服务器上的 /proc/softirqs 里 NET_RX 要比 NET_TX 大的多的多？ 问3：发送网络数据的时候都涉及到哪些内存拷贝操作？ 这些问题虽然在线上经常看到，但我们似乎很少去深究。如果真的能透彻地把这些问题理解到位，我们对性能的掌控能力将会变得更强。","link":"/pages/wiki-linux-network/"},{"title":"一文了解netfilter 和 iptables","text":"Netfilter （配合 iptables）使得用户空间应用程序可以注册内核网络栈在处理数据包时应用的处理规则，实现高效的网络转发和过滤。很多常见的主机防火墙程序以及 Kubernetes 的 Service 转发都是通过 iptables 来实现的。 关于 netfilter 的介绍文章大部分只描述了抽象的概念，实际上其内核代码的基本实现不算复杂，本文主要参考 Linux 内核 2.6 版本代码（早期版本较为简单），与最新的 5.x 版本在实现上可能有较大差异，但基本设计变化不大，不影响理解其原理。","link":"/pages/wiki-netfilter-iptables/"},{"title":"一文了解集线器、交换机、路由器、MAC地址、IP地址和ARP","text":"你是一台电脑，你的名字叫 A 很久很久之前，你不与任何其他电脑相连接，孤苦伶仃。 直到有一天，你希望与另一台电脑 B 建立通信，于是你们各开了一个网口，用一根网线连接了起来。","link":"/pages/wiki-network/"},{"title":"一文了解Paxos","text":"背景 分布式系统中, 其中一个基础的问题是如何在不可靠硬件(低可用性)基础上构建可靠(高可用性)的服务, 要达成这个目标, 核心的手段就是复制(例如一份数据存3个副本). 而复制过程中的一致性问题, 最后都归结为Paxos的解决方案2 Paxos","link":"/pages/wiki-paxos/"},{"title":"一文了解虚拟私有云VPC的实现","text":"大家好，我是二哥。新年第一篇肝文来了。在开始之前，我们先来看看下面几个问题： XX云上租用VM，你一定会碰到VPC。你是否好奇过VPC到底是如何实现的？ 你在XX云上租用的VM和别人家的VM跑在一台物理机上，它们之间的网络流量又是如何被隔离的？ 你的1000个K8s Pod分散在50个VM上，这50个VM又散落在10个物理机上，那这些Pod之间通信时，数据包是如何跨物理机流动的？ 来吧，进入正题。","link":"/pages/wiki-vpc/"},{"title":"知乎的技术架构","text":"Timeline架构演进这里的Timeline是指按时间排列的用户的动态（关注了问题，赞同了回答，发表回答等），","link":"/pages/zhihu-arch/"},{"title":"一文了解Service Mesh","text":"服务网格是一个基础设施层，用于处理服务间通信。云原生应用有着复杂的服务拓扑，服务网格保证请求在这些拓扑中可靠地穿梭。在实际应用当中，服务网格通常是由一系列轻量级的网络代理组成的，它们与应用程序部署在一起，但对应用程序透明。 Service Mesh具有如下优点： 屏蔽分布式系统通信的复杂性(负载均衡、服务发现、认证授权、监控追踪、流量控制等等)，服务只用关注业务逻辑； 真正的语言无关，服务可以用任何语言编写，只需和Service Mesh通信即可； 对应用透明，Service Mesh组件可以单独升级；","link":"/pages/wiki-service-mesh/"}],"tags":[{"name":"大数据","slug":"大数据","link":"/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"Serverless","slug":"Serverless","link":"/tags/Serverless/"},{"name":"yarn","slug":"yarn","link":"/tags/yarn/"},{"name":"在离线混部","slug":"在离线混部","link":"/tags/%E5%9C%A8%E7%A6%BB%E7%BA%BF%E6%B7%B7%E9%83%A8/"},{"name":"Kubernetes","slug":"Kubernetes","link":"/tags/Kubernetes/"},{"name":"Knative","slug":"Knative","link":"/tags/Knative/"},{"name":"智能运维","slug":"智能运维","link":"/tags/%E6%99%BA%E8%83%BD%E8%BF%90%E7%BB%B4/"},{"name":"feed服务","slug":"feed服务","link":"/tags/feed%E6%9C%8D%E5%8A%A1/"},{"name":"网络虚拟化","slug":"网络虚拟化","link":"/tags/%E7%BD%91%E7%BB%9C%E8%99%9A%E6%8B%9F%E5%8C%96/"},{"name":"Linux网络","slug":"Linux网络","link":"/tags/Linux%E7%BD%91%E7%BB%9C/"},{"name":"分布式一致性","slug":"分布式一致性","link":"/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7/"}],"categories":[{"name":"技术架构","slug":"技术架构","link":"/categories/%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"},{"name":"综述","slug":"综述","link":"/categories/%E7%BB%BC%E8%BF%B0/"},{"name":"一文了解","slug":"一文了解","link":"/categories/%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3/"},{"name":"问题","slug":"问题","link":"/categories/%E9%97%AE%E9%A2%98/"}]}